// replace 'master' with the library version you are using
@Library("dynatrace@master")
def event = new com.dynatrace.ace.Event()

def tagMatchRules = [[
  "meTypes": [ "SERVICE"],
  tags: [
    ["context": "CONTEXTLESS", "key": "project", "value": "demo"],
    ["context": "CONTEXTLESS", "key": "stage", "value": "dev"],
    ["context": "CONTEXTLESS", "key": "service", "value": "simple-web-app-1"]
  ]
]]

pipeline {
    agent any
    environment {
      DT_TENANT_URL = credentials('DT_TENANT_URL')
    	DT_API_TOKEN = credentials('DT_API_TOKEN')
    }
    stages {
        stage("CUSTOM_DEPLOYMENT") {
            steps {
                script {
                    def status = event.pushDynatraceEvent (
                      eventType: "CUSTOM_DEPLOYMENT",
                      tagRule: tagMatchRules,
                      deploymentName: "myDeploymentJob: ${env.JOB_NAME}",
                      deploymentVersion: "myDeploymentVersion",
                      deploymentProject: "myDeploymentProject",
                      remediationAction: "myRemediationAction",
                      customProperties : [
                          "Jenkins JOB_NAME": "${env.JOB_NAME}",
                          "Jenkins BUILD_NUMBER": "${env.BUILD_NUMBER}"
                      ]
                    )
                  }
            }
        }
        stage("CUSTOM_ANNOTATION") {
            steps {
                script {
                    def status = event.pushDynatraceEvent (
                      eventType: "CUSTOM_ANNOTATION",
                      tagRule: tagMatchRules,
                      description: "myDescription",
                      annotationType: "myAnnotationType",
                      annotationDescription: "myAnnotationDescription",
                      customProperties : [
                          "Jenkins JOB_NAME": "${env.JOB_NAME}",
                          "Jenkins BUILD_NUMBER": "${env.BUILD_NUMBER}"
                      ]
                    )
                  }
            }
        }
        stage("CUSTOM_CONFIGURATION") {
            steps {
                script {
                    def status = event.pushDynatraceEvent (
                      eventType: "CUSTOM_CONFIGURATION",
                      tagRule: tagMatchRules,
                      configuration: "myConfiguration",
                      description: "myDescription",
                      source : "mySource",
                      customProperties : [
                          "Jenkins JOB_NAME": "${env.JOB_NAME}",
                          "Jenkins BUILD_NUMBER": "${env.BUILD_NUMBER}"
                      ]
                    )
                  }
            }
        }
        stage("CUSTOM_INFO") {
            steps {
                script {
                    def status = event.pushDynatraceEvent (
                      eventType: "CUSTOM_INFO",
                      tagRule: tagMatchRules,
                      title: "myInfoTitle",
                      description: "myInfoDescription",
                      source : "mySource",
                      customProperties : [
                          "Jenkins JOB_NAME": "${env.JOB_NAME}",
                          "Jenkins BUILD_NUMBER": "${env.BUILD_NUMBER}"
                      ]
                    )
                  }
            }
        }
    }
}
